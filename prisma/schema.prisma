// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(cuid())
  first_name   String
  last_name    String
  email        String        @unique
  password     String
  country_code String
  phone_no     String
  address_1    String
  address_2    String?
  postcode     String
  state        String
  city         String
  is_verified  Boolean       @default(false)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  verification Verification?
  role         UserRole      @default(USER)
  UserCourse   UserCourse[]

  @@index([email])
}

model Verification {
  id           String           @id @default(cuid())
  token        String
  token_expiry DateTime
  type         VerificationType
  user_id      String           @unique
  user         User             @relation(fields: [user_id], references: [id])
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt

  @@index([user_id])
}

model Institution {
  id            String          @id @default(cuid())
  name          String
  code          String          @unique
  type_id       String
  type          InstitutionType @relation(fields: [type_id], references: [id])
  academicYears AcademicYear[]
  courses       Course[]
  albums        Album[]
  photos        Photo[]

  created_by_user_id String
  created_by_name    String
  created_at         DateTime @default(now())
  updated_by_user_id String
  updated_by_name    String
  updated_at         DateTime @updatedAt
}

model AcademicYear {
  id             String      @id @default(cuid())
  name           String
  institution_id String
  start_date     DateTime
  end_date       DateTime
  year           Int
  institution    Institution @relation(fields: [institution_id], references: [id])
  course         Course[]

  created_by_user_id String
  created_by_name    String
  created_at         DateTime @default(now())
  updated_by_user_id String
  updated_by_name    String
  updated_at         DateTime @updatedAt

  @@index([institution_id])
}

model Course {
  id               String       @id @default(cuid())
  name             String
  standard_id      String
  standard         Standard     @relation(fields: [standard_id], references: [id])
  access_code      String       @unique
  institution_id   String
  institution      Institution  @relation(fields: [institution_id], references: [id])
  academic_year_id String
  academicYear     AcademicYear @relation(fields: [academic_year_id], references: [id])
  start_date       DateTime
  end_date         DateTime
  valid_period     ValidType
  albums           Album[]

  created_by_user_id String
  created_by_name    String
  created_at         DateTime     @default(now())
  updated_by_user_id String
  updated_by_name    String
  updated_at         DateTime     @updatedAt
  UserCourse         UserCourse[]

  @@index([institution_id])
  @@index([academic_year_id])
}

model Standard {
  id     String   @id @default(cuid())
  name   String
  course Course[]

  created_by_user_id String
  created_by_name    String
  created_at         DateTime @default(now())
  updated_by_user_id String
  updated_by_name    String
  updated_at         DateTime @updatedAt
}

model InstitutionType {
  id           String        @id @default(cuid())
  name         String
  institutions Institution[]

  created_by_user_id String
  created_by_name    String
  created_at         DateTime @default(now())
  updated_by_user_id String
  updated_by_name    String
  updated_at         DateTime @updatedAt
}

model Album {
  id                     String                  @id @default(cuid())
  name                   String
  description            String
  product_type_id        String?
  product_type           ProductType?            @relation(fields: [product_type_id], references: [id])
  photos                 Photo[]
  institution_id         String?
  institution            Institution?            @relation(fields: [institution_id], references: [id])
  course_id              String?
  course                 Course?                 @relation(fields: [course_id], references: [id])
  albumProductVariations AlbumProductVariation[]

  created_by_user_id String
  created_by_name    String
  created_at         DateTime @default(now())
  updated_by_user_id String
  updated_by_name    String
  updated_at         DateTime @updatedAt

  @@index([institution_id])
  @@index([course_id])
  @@index([product_type_id])
}

model Photo {
  id                     String       @id @default(cuid())
  name                   String
  download_url           String
  download_watermark_url String
  display_url            String
  album_id               String
  album                  Album        @relation(fields: [album_id], references: [id])
  institution_id         String?
  institution            Institution? @relation(fields: [institution_id], references: [id])

  created_by_user_id String
  created_by_name    String
  created_at         DateTime @default(now())
  updated_by_user_id String
  updated_by_name    String
  updated_at         DateTime @updatedAt

  @@index([album_id])
  @@index([institution_id])
}

model UserCourse {
  id        String   @id @default(cuid())
  names     String[]
  user_id   String
  user      User     @relation(fields: [user_id], references: [id])
  course_id String
  course    Course   @relation(fields: [course_id], references: [id])

  created_by_user_id String
  created_by_name    String
  created_at         DateTime @default(now())
  updated_by_user_id String
  updated_by_name    String
  updated_at         DateTime @updatedAt

  @@index([user_id])
  @@index([course_id])
}

model ProductType {
  id             String          @id @default(cuid())
  name           String
  type           ProductTypeType
  currency       String
  price          Float
  is_deliverable Boolean         @default(true)
  Album          Album[]

  created_by_user_id String
  created_by_name    String
  created_at         DateTime @default(now())
  updated_by_user_id String
  updated_by_name    String
  updated_at         DateTime @updatedAt
}

model ProductVariation {
  id                     String                  @id @default(cuid())
  name                   String
  description            String
  is_downloadable        Boolean                 @default(true)
  albumProductVariations AlbumProductVariation[]

  created_by_user_id String
  created_by_name    String
  created_at         DateTime                 @default(now())
  updated_by_user_id String
  updated_by_name    String
  updated_at         DateTime                 @updatedAt
  options            ProductVariationOption[]

  @@index([id])
}

model ProductVariationOption {
  id                  String            @id @default(cuid())
  name                String
  description         String
  preview_url         String?
  preview_url_key     String?
  currency            String
  price               Float
  ProductVariation    ProductVariation? @relation(fields: [productVariation_id], references: [id])
  productVariation_id String?

  created_by_user_id String
  created_by_name    String
  created_at         DateTime @default(now())
  updated_by_user_id String
  updated_by_name    String
  updated_at         DateTime @updatedAt
}

model AlbumProductVariation {
  album_id            String
  album               Album            @relation(fields: [album_id], references: [id])
  productVariation_id String
  productVariation    ProductVariation @relation(fields: [productVariation_id], references: [id])

  created_by_user_id String
  created_by_name    String
  created_at         DateTime @default(now())
  updated_by_user_id String
  updated_by_name    String
  updated_at         DateTime @updatedAt

  @@id([album_id, productVariation_id])
  @@index([album_id])
  @@index([productVariation_id])
}

enum ProductTypeType {
  INDIVIDUAL
  GROUP
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum UserRole {
  ADMIN
  SUPERADMIN
  USER
}

enum ValidType {
  MONTH
  QUARTER
  HALF
  YEAR
  CUSTOM
}
