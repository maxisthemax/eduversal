// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(cuid())
  first_name   String
  last_name    String
  email        String        @unique
  password     String
  country_code String
  phone_no     String
  address_1    String
  address_2    String?
  postcode     String
  state        String
  city         String
  is_verified  Boolean       @default(false)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  verification Verification?
  role         UserRole      @default(USER)

  @@index([email])
}

model Verification {
  id           String           @id @default(cuid())
  token        String
  token_expiry DateTime
  type         VerificationType
  user_id      String           @unique
  user         User             @relation(fields: [user_id], references: [id])
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt

  @@index([user_id])
}

model Institution {
  id            String          @id @default(cuid())
  name          String
  code          String          @unique
  type_id       String
  type          InstitutionType @relation(fields: [type_id], references: [id])
  academicYears AcademicYear[]

  created_by_user_id String
  created_by_name    String
  created_at         DateTime @default(now())
  updated_by_user_id String
  updated_by_name    String
  updated_at         DateTime @updatedAt
}

model AcademicYear {
  id             String      @id @default(cuid())
  name           String
  institution_id String
  start_date     DateTime
  end_date       DateTime
  year           Int
  institution    Institution @relation(fields: [institution_id], references: [id])
  classes        Class[]

  created_by_user_id String
  created_by_name    String
  created_at         DateTime @default(now())
  updated_by_user_id String
  updated_by_name    String
  updated_at         DateTime @updatedAt

  @@index([institution_id])
}

model Class {
  id               String       @id @default(cuid())
  name             String
  standard_id      String
  standard         Standard     @relation(fields: [standard_id], references: [id])
  access_code      String       @unique
  academic_year_id String
  academicYear     AcademicYear @relation(fields: [academic_year_id], references: [id])
  start_date       DateTime
  end_date         DateTime

  created_by_user_id String
  created_by_name    String
  created_at         DateTime @default(now())
  updated_by_user_id String
  updated_by_name    String
  updated_at         DateTime @updatedAt

  @@index([academic_year_id])
}

model Standard {
  id      String  @id @default(cuid())
  name    String
  classes Class[]

  created_by_user_id String
  created_by_name    String
  created_at         DateTime @default(now())
  updated_by_user_id String
  updated_by_name    String
  updated_at         DateTime @updatedAt
}

model InstitutionType {
  id           String        @id @default(cuid())
  name         String
  institutions Institution[]

  created_by_user_id String
  created_by_name    String
  created_at         DateTime @default(now())
  updated_by_user_id String
  updated_by_name    String
  updated_at         DateTime @updatedAt
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum UserRole {
  ADMIN
  SUPERADMIN
  USER
}
